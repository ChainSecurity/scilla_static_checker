.symbol_type Unit
.symbol_type Type
.symbol_type Proc
.symbol_type Plan

.type Element = Unit | Type | Proc | Plan
.type Function = Proc

.decl absDD(unitId: Unit, term: Unit)
.decl absTD(unitId: Unit, term: Unit)
.decl absTT(unitId: Unit, term: Unit)
.decl accept(unitId: Unit)
.decl appDD(unitId: Unit, to: Unit)
.decl appTD(unitId: Unit, to: Unit)
.decl appTT(unitId: Unit, to: Unit)
.decl argument(unitId: Unit, appddId: Unit, index: number) 
.decl bind(unitId: Unit, bindType: Type, cond: Unit)
.decl bnr(unitId: Unit, type: Type, data: number)
.decl bnrType(unitId: Unit)
.decl builtin(unitId: Unit, type: Type, name: symbol)
.decl builtinVar(unitId: Unit, type: Type, name: symbol)
.decl callProc(unitId: Unit, to: Proc)
.decl cond(unitId: Unit, case: symbol)
.decl condBind(unitId: Unit, cond: Unit, index: number)
.decl constructor(procId: Proc)
.decl dataCase(unitId: Unit, bind: Unit, body: Unit)
.decl dataVar(unitId: Unit)
.decl enum(enum_id: Unit, enum_type: Type, case: symbol)
.decl enumType(unitId: Unit)
.decl event(unitId: Unit, data: Unit)
.decl field(slot: symbol)
.decl int(unitId: Unit, type: Type, data: number)
.decl intType(typeId: Type, size: number)
.decl jump(from: Unit, to: Unit)
.decl keyArgument(msgIdd: Unit, unitId: Unit, tagName: symbol)
.decl load(unitId: Unit, slot : symbol)
.decl mapType(unitId: Unit, keType : Unit, varType : Unit)
.decl msg(unitId: Unit, unit_type: Type)
.decl msgType(unitId: Type)
.decl nat(unitId: Unit, type: Type, data: number)
.decl natType(typeId: Type, size: number)
.decl pickData(unitId: Unit, from: Unit)
.decl pickProc(unitId: Unit, from: Unit)
.decl plan(proc_id: Proc, unitId: Unit, index: number)
.decl procCase(unitId: Unit, bind: Unit, body: Unit)
.decl proc(unitId: Unit, name: symbol)
.decl procedure(procId: Proc)
.decl raw(unitId: Unit, type: Type, data: symbol)
.decl rawType(typeId: Type, size: number)
.decl save(unitId: Unit, slot: symbol, data: Unit)
.decl send(unitId: Unit, data: Unit)
.decl setKind(unitId: Unit)
.decl str(unitId: Unit, type: Type, data: symbol)
.decl strType(type_id: Type)
.decl transition(unitId: Unit)
.decl typeVar(type: symbol)
.decl unit(unitId: Unit)

.input absDD
.input absTD
.input absTT
.input accept
.input appDD
.input appTD
.input appTT
.input argument
.input bind
.input bnr
.input bnrType
.input builtin
.input builtinVar
.input callProc
.input cond
.input condBind
.input constructor
.input dataCase
.input dataVar
.input enum
.input enumType
.input event
.input field
.input int
.input intType
.input jump
.input keyArgument
.input load
.input mapType
.input msg
.input msgType
.input nat
.input natType
.input pickData
.input pickProc
.input plan
.input proc
.input procCase
.input procedure
.input raw
.input rawType
.input save
.input send
.input setKind
.input str
.input strType
.input transition
.input typeVar
.input unit
