.symbol_type Unit
.symbol_type Type
.symbol_type Proc
.symbol_type Plan

.type Element = Unit | Type | Proc | Plan

.decl plan(proc_id: Proc, unitId: Unit, index: number)
.decl msg(unitId: Unit, unit_type: Type)
.decl send(unitId: Unit, data: Unit)
.decl load(unitId: Unit, slot : symbol)
.decl appDD(unitId: Unit, to: Unit)
.decl appTD(unitId: Unit, to: Unit)
.decl appTT(unitId: Unit, to: Unit)
.decl argument(unitId: Unit, appdd_id: Unit, index: number) 
.decl absDD(unitId: Unit, term: Unit)
.decl absTD(unitId: Unit, term: Unit)
.decl keyArgument(msg_id: Unit, unitId: Unit, tag_name: symbol)
.decl str(unitId: Unit, type: Type, data: symbol)
.decl pickData(unitId: Unit, from: Unit, with: Unit)
.decl dataCase(unitId: Unit, pick_data_id: Unit, bind: Unit, body: Unit)
.decl nat(unitId: Unit, type: Type, data: number)
.decl natType(type_id: Type, size: number)
.decl bind(unitId: Unit, bind_type: Type, cond: Unit)
.decl cond(unitId: Unit, case: symbol)
.decl condBind(unitId: Unit, cond: Unit, index: number)
.decl typeVar(type: symbol)
.decl enum(enum_id: Unit, enum_type: Type, case: symbol)
.decl accept(unitId: Unit)
.decl msgType(unitId: Type)
.decl save(unitId: Unit, slot: symbol, data: Unit)
.decl procedure(unitId: Unit, name: symbol)
.decl transition(unitId: Unit)
.decl builtin(unitId: Unit, type: Type, name: symbol)
.decl unit(unitId: Unit)

.input plan
.input msg
.input send
.input load
.input appDD
.input appTD
.input appTT
.input argument
.input absDD
.input absTD
.input keyArgument
.input str
.input pickData
.input dataCase
.input nat
.input natType
.input bind
.input cond
.input condBind
.input typeVar
.input enum
.input accept
.input msgType
.input save
.input procedure
.input transition
.input builtin
