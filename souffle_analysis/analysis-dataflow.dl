.comp MayDepOnAnalysis {

    .decl mayDependOnStep(elemCtx: ctxProvider.ElementInContext, prevCtx: ctxProvider.ElementInContext)
    mayDependOnStep(elemCtx, elemCtx) :-
        ctxProvider.elementInContext(elemCtx, _, _).

    mayDependOnStep(elemCtx, prevCtx) :-
        followsStep(elem, prev),
        !(argument(elem, prev, _), 
            (
            appDD(elem, _); 
            appTD(elem, _);
            absDD(elem, _);
            absTD(elem, _)
            ) 
        ),
        ctxProvider.elementInContext(elemCtx, elem, ctx),
        ctxProvider.elementInContext(prevCtx, prev, ctx).

    mayDependOnStep(elemCtx, prevCtx) :-
        followsStep(elem, prev),
        ctxProvider.followsContext(ctxElem, ctxPrev),
        ctxProvider.elementInContext(elemCtx, elem, ctxElem),
        ctxProvider.elementInContext(prevCtx, prev, ctxPrev).

    .decl log(a: ctxProvider.ElementInContext, b: ctxProvider.ElementInContext)
    //log(parameterCtx, argumentCtx),
    mayDependOnStep(parameterCtx, argumentCtx) :-
        transfer(_, argument, parameter),
        (appDD(appDD, _); appTD(appDD, _)),
        argument(appDD, argument, _),
        (   
            [appDD, ctxArgument] = ctxParameter ; 
            ctxProvider.followsContext( [appDD,ctxArgument], ctxParameter)
        ),
        ctxProvider.elementInContext(argumentCtx, argument, ctxArgument),
        ctxProvider.elementInContext(parameterCtx, parameter, ctxParameter).

    mayDependOnStep(absDDCtx, varCtx) :-
        absDD(absDD, term),
        builtin(term, _, _),
        argument(absDD, var, _),
        ctxProvider.elementInContext(absDDCtx, absDD, ctx),
        ctxProvider.elementInContext(varCtx, var, ctx).

    //mayDependOnStep(parameterCtx, argumentCtx) :-
        //transfer(_, argument, parameter),
        //(absDD(appDD, _); absTD(appDD, _)),
        //argument(appDD, argument, _),
        //(
            //ctxArgument = ctxParameter ; 
            //ctxProvider.followsContext( [appDD,ctxArgument], ctxParameter)
        //),
        //ctxProvider.elementInContext(argumentCtx, argument, ctxArgument),
        //ctxProvider.elementInContext(parameterCtx, parameter, ctxParameter).
    //.output log

    .output mayDependOnStep

    .decl mayDependOn(elemCtx: ctxProvider.ElementInContext, prevCtx: ctxProvider.ElementInContext)
    mayDependOn(elemCtx, prevCtx) :- mayDependOnStep(elemCtx, prevCtx).
    mayDependOn(elemCtx, prevCtx) :- 
        mayDependOnStep(elemCtx, intermediateCtx), 
        mayDependOn(intermediateCtx, prevCtx).

    .output mayDependOn

    .decl printMayDependOnStep(elem: Element, ctxStr: symbol, prevElem: Element, prevCtxStr: symbol)
    printMayDependOnStep(elem, ctxStr, prevElem, prevCtxStr) :-
        mayDependOnStep(elemCtx, prevElemCtx),
        ctxProvider.elementInContext(elemCtx, elem, ctx),
        ctxProvider.contextToString(ctx, ctxStr),
        ctxProvider.elementInContext(prevElemCtx, prevElem, prevCtx),
        ctxProvider.contextToString(prevCtx, prevCtxStr).

    .output printMayDependOnStep

}