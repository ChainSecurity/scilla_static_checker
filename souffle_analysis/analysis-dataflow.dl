.comp MayDepOnAnalysis {

    .decl mayDependOnStep(elemCtx: ctxProvider.ElementInContext, prevCtx: ctxProvider.ElementInContext)
    mayDependOnStep(elemCtx, elemCtx) :-
        ctxProvider.elementInContext(elemCtx, _, _).

    mayDependOnStep(elemCtx, prevCtx) :-
        followsStep(elem, prev),
        ctxProvider.elementInContext(elemCtx, elem, ctx),
        ctxProvider.elementInContext(prevCtx, prev, ctx).

    mayDependOnStep(elemCtx, prevCtx) :-
        followsStep(elem, prev),
        ctxProvider.followsContext(ctxElem, ctxPrev),
        ctxProvider.elementInContext(elemCtx, elem, ctxElem),
        ctxProvider.elementInContext(prevCtx, prev, ctxPrev).

    .output mayDependOnStep

    .decl mayDependOn(elemCtx: ctxProvider.ElementInContext, prevCtx: ctxProvider.ElementInContext)
    mayDependOn(elemCtx, prevCtx) :- mayDependOnStep(elemCtx, prevCtx).
    mayDependOn(elemCtx, prevCtx) :- 
        mayDependOnStep(elemCtx, intermediateCtx), 
        mayDependOn(intermediateCtx, prevCtx).

    .output mayDependOn

    .decl printMayDependOnStep(elem: Element, ctxStr: symbol, prevElem: Element, prevCtxStr: symbol)
    printMayDependOnStep(elem, ctxStr, prevElem, prevCtxStr) :-
        mayDependOnStep(elemCtx, prevElemCtx),
        ctxProvider.elementInContext(elemCtx, elem, ctx),
        ctxProvider.contextToString(ctx, ctxStr),
        ctxProvider.elementInContext(prevElemCtx, prevElem, prevCtx),
        ctxProvider.contextToString(prevCtx, prevCtxStr).

    .output printMayDependOnStep

}