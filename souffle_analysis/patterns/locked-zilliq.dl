
// Locked Zilliq where there's accept and send or there's a send with zero amount
.decl lockedZilliq() :- 
    accept(_),
    (
        !send(_); 
        zero_send()
    ).

.decl zeroSend() :-
    send(_, data_id),
    dependsOn(data_id, msg_id)
    msg(msg_id),
    data(num, msg_id, "_amount"),
    nat(num, _, "0").



// DependsOn: a unit depends on another one which is closer to the leaves of the tree
.decl dependsOnStep(unit: Unit, previousUnit: Unit)
dependsOnStep(dependent, independent) :-
    unit(dependent),
    unit(independent),
    (
        argument(independent, dependent);
        data(independent, dependent);
        appDD(dependent, independent);
        appTD(dependent, independent);
        absDD(dependent, independent);
        bind(dependent, independent)
        condBind(dependent, independent)
    ).

.decl dependsOn(dependent: Unit, independent: Unit)
dependsOn(dependent, independent) :- dependsOnStep(dependent, independent).
dependsOn(dependent, independent) :- dependsOnStep(dependent, intermediate), dependsOn(intermediate, independent).

