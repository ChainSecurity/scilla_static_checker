// accept_payment_and_send_0.json :locked-zilliq:True
// accept_payment_and_send.json :locked-zilliq:False
// accept_payment.json :locked-zilliq:True

// Locked Zilliq where there's accept and send or all sends contain zero values 
// (there are no nonZeroValues sent)

.comp LockedZilliqPattern : Pattern{
    NAME("Locked Zilliq")


    // TODO: Why STR_JOIN doesn't work
    DESCRIPTION("Contracts that may receive ether must also allow users to extract the deposited zilliq from the contract.")

    SEVERITY(MEDIUM)

    applicable(unitId, "unknown") :-
        lockedZilliq(unitId).


    violation(unitId, "unknown_line", "") :-
        applicable(unitId, "unknown").

    .decl lockedZilliq(unitId : Unit)
    lockedZilliq(unitId) :- 
        accept(unitId),
        (
            !send(_, _); 
            !nonZeroSend()
        ).

    // this should be changed to nonZeroSend
    .decl nonZeroSend()
    nonZeroSend() :-
        send(_, data_id),
        follows(data_id, msg_id),
        msg(msg_id, _),
        keyArgument(msg_id, num_id, "_amount"),
        !nat(num_id, _, 0).
    
    //.output lockedZilliq
    //.output nonZeroSend


}


