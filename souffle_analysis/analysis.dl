#include "analysis-input.dl"
#include "analysis-patterns.dl"
#include "util-macros.dl"
#include "util-graph.dl"
#include "util-lists.dl"
#include "analysis-contexts.dl"
#include "analysis-dataflow.dl"
#include "analysis-infoflow.dl"

.init ctxProvider = ContextProvider
.init infoflow = InfoFlowAnalysis
.init dataflow = MayDepOnAnalysis

// follows: a unit depends on another one which is closer to the leaves of the tree
.decl followsStep(element: Element, previousElement: Element)
followsStep(dependent, independent) :-
    (
        absDD(dependent, independent);
        absTD(dependent, independent);
        absTT(dependent, independent);
        appDD(dependent, independent);
        appTD(dependent, independent);
        argument(dependent, independent, _);
        bind(dependent, _, independent);
        callProc(dependent, independent);
        condBind(dependent, independent, _);
        dataCase(dependent, independent, _, _);
        dataCase(dependent, _, independent, _);
        dataCase(dependent, _, _, independent);
        jump(dependent, independent);
        keyArgument(dependent, independent, _);
        mapType(dependent, _, independent);
        pickData(dependent, independent, _);
        pickProc(dependent, independent);
        plan(dependent, independent, _);
        procCase(dependent, independent, _);
        procCase(dependent, _, independent);
        save(dependent, _, independent);
        send(dependent, independent);
        event(dependent, independent)
    ).
.output followsStep

.decl follows(dependent: Unit, independent: Unit)
follows(dependent, independent) :- followsStep(dependent, independent).
follows(dependent, independent) :- followsStep(dependent, intermediate), follows(intermediate, independent).

.output follows

.decl transfer(transfer: Unit, argument: Unit, parameter: Unit)
transfer(transfer, argument, parameter):-
    appDD(transfer, _),
    argument(transfer, argument, index),
    argument(absDDId, parameter, index),
    follows(transfer, absDDId),
    absDD(absDDId, _),
    cApp = count : {follows(transfer, intermediate), appDD(intermediate, _) ,follows(intermediate, absDDId)},
    cAbs = count : {follows(transfer, intermediate), absDD(intermediate, _) ,follows(intermediate, absDDId)},
    cApp = cAbs.

.output transfer



.decl planApp(unitId: Unit)
planApp(unitId):-
    appDD(unitId, _), plan(_, unitId, _).

planApp(unitId):-
    appTD(unitId, _), plan(_, unitId, _).

.output planApp
