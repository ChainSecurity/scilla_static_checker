#include "analysis-input.dl"
#include "analysis-patterns.dl"
#include "util-macros.dl"

// DependsOn: a unit depends on another one which is closer to the leaves of the tree
.decl dependsOnStep(unit: Unit, previousUnit: Unit)
dependsOnStep(dependent, independent) :-
    unit(dependent),
    unit(independent),
    (
        send(dependent, independent);
        argument(dependent, independent, _);
        keyArgument(dependent, independent, _);
        appDD(dependent, independent);
        appTD(dependent, independent);
        absDD(dependent, independent);
        absTD(dependent, independent);
        bind(dependent, _, independent);
        condBind(dependent, independent, _)
    ).

.decl dependsOn(dependent: Unit, independent: Unit)
dependsOn(dependent, independent) :- dependsOnStep(dependent, independent).
dependsOn(dependent, independent) :- dependsOnStep(dependent, intermediate), dependsOn(intermediate, independent).

.output dependsOn


//followsPlan(nextUnitPlan, prevUnitPlan) :-
    //plan(procId, nextUnitPlan, nextIndex),
    //plan(procId, prevUnitPlan, previousIndex),
    //nextIndex > previousIndex.
