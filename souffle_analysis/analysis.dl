#include "analysis-input.dl"

#include "patterns/locked-zilliq.dl"

// DependsOn: a unit depends on another one which is closer to the leaves of the tree
.decl dependsOnStep(unit: Unit, previousUnit: Unit)
dependsOnStep(dependent, independent) :-
    unit(dependent),
    unit(independent),
    (
        send(dependent, independent);
        argument(dependent, independent, _);
        msgData(dependent, independent, _);
        appDD(dependent, independent);
        appTD(dependent, independent);
        absDD(dependent, independent);
        bind(dependent, _, independent);
        condBind(dependent, independent, _)
    ).

.decl dependsOn(dependent: Unit, independent: Unit)
dependsOn(dependent, independent) :- dependsOnStep(dependent, independent).
dependsOn(dependent, independent) :- dependsOnStep(dependent, intermediate), dependsOn(intermediate, independent).

.output dependsOn

.decl unit(unit_id: Unit)
unit(unit_id) :- 
    (
        msg(unit_id, _);
        send(unit_id, _);
        send(unit_id, _);
        load(unit_id, _);
        appDD(unit_id, _);
        appTD(unit_id, _);
        appTT(unit_id, _);
        argument(unit_id, _, _);
        absDD(unit_id, _);
        msgData(unit_id, _, _);
        str(unit_id, _, _);
        pickData(unit_id, _, _);
        dataCase(unit_id, _, _, _);
        nat(unit_id, _, _);
        bind(unit_id, _, _);
        cond(unit_id, _);
        condBind(unit_id, _, _);
        accept(unit_id)
    ).